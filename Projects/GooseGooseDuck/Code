from PIL import Image
import os # to work with the file system
import numpy as np
import cv2 # to read and process images
import tensorflow as tf # to load the model and preprocess images
from tensorflow import keras
import matplotlib.pyplot as plt # to display images
from tqdm import tqdm # to display file processing progress

Use backslash for path

def Preprocessing_code(path_to_imgs):
    all_classes = {}
    imgs = []
    classes = []
    h,w = 299,299
    for i, name in enumerate(os.listdir(path_to_imgs)):
        all_classes[i] = name
        for j in tqdm(os.listdir(path_to_imgs + name)):
            img = cv2.imread(path_to_imgs + name + "/" + j)
            img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
            img = cv2.resize(img,(h,w))
            imgs.append(tf.keras.applications.inception_v3.preprocess_input(img))
            classes.append(i)
    x = np.array(x)
    y = np.array(y)
    return all_classes, imgs, classes

Example of use

classesX, images, y = Preprocessing_code(path)

def img_chek()
    plt.figure(figsize = (12,15))
    for i in range(100):
        ind = np.random.randint(0,len(x) + )
        plt.subplot(10,10,i + 1)
        plt.title(classesX[y[ind]])
        plt.imshow(images[ind])
        plt.xticks([])
        plt.yticks([])


def for_keras(x):
    model = keras.models.load_model("my_model.keras")
    p = model.pred(x)
    for i in p:
        print(f'class: {np.argmax(i)} â€” {d[np.argmax(i)]}\nModel confidence: {max(i) * 100}%')
